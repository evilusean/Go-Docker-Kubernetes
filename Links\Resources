Learn GO :
https://go.dev/tour/welcome/1
https://gobyexample.com/
https://go.dev/doc/effective_go
https://www.youtube.com/watch?v=qT14b1pxtiI
https://github.com/Melkeydev/go-blueprint

Learn Test Driven Development(TDD) with Go :
https://quii.gitbook.io/learn-go-with-tests

Go in 100 Seconds :
https://www.youtube.com/watch?v=446E-r0rXHI&ab_channel=Fireship

How to write HTTP Services in GO:
https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/
https://go.dev/doc/articles/wiki/

Go + Docker + Air = Live Reload GoLang Apps even when dockerized: 
https://www.youtube.com/watch?v=Lnfzrus7G5s

B!ook : 100 Go Mistakes and how to avoid them:
https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them

Learn Go in 1 Hour :
https://www.youtube.com/watch?v=8uiZC0l4Ajw

FCC - Go Programming â€“ Golang Course with Bonus Projects :
https://www.youtube.com/watch?v=un6ZyFkqFKo

FCC - 11 GoLang Projects (8 hours): 
https://www.youtube.com/watch?v=jFfo23yIWac

Go + HTMX = Simple Tech Stack
Go Projects x5 (ToDo App-CLI Terminal, Backend Stateless Web API, Webscraper for dead links, URL Shortener website, Currency Converter-Terminal UI) :
https://www.youtube.com/watch?v=gXmznGEW9vo

NeoVim Setup for Go(Linter/Language Server/Code AutoComplete) Linter will catch all compile errors:
https://www.youtube.com/watch?v=i04sSQjd-qo

ContainerIzeASean - Kubernetes+Docker is written in GO / esbuild-web bundler / Traefik(reverse proxy and load balancer, like NGINX) / CLI / Web API :
https://www.youtube.com/watch?v=JtS1nGGyw9U

Build a Schedule App that can connect to the Google API and send/receive, also runs in CLI, shows whats next to do, can retrieve on mobile phone/gmail account, and keep in a tmux tab on second monitor
If feeling ambitious throw in an alarm sound, and pomodoro timer, 

Build an Ascii render for video files, I technically have one with mplayer/mpd, but you can't run MPD with NCMPCPP running, and MPLAYER just opens a new window of MPLAYER and runs from the terminal, not in
Could just use Go to render in ascii, then run in the current terminal and just have a high refresh rate (30FPS?) 

Go + HTMX Portfolio - can self host - Idk if I want to run a webserver on my laptop though - or just add an extra row for x3 Go Projects on my Web Developer Portfolio 

Vercel = AWS Lambdas (500% markup - AWS wrapper/UI/UX/DevX - same product, just more expensive - don't be 'that' guy - just git gud) :
VPS(Virtual Private Server) Dev Ops - Railway/Netlify/Vercel Vs AWS/Hostinger/ :
https://www.youtube.com/watch?v=F-9KWQByeU0&ab_channel=DreamsofCode

How to make AWS not suck(DevOps) - Terraform/Pulumi(Go)/SST(typescript pulumi wrapper)/Docker/LocalStack(AWS Services Locally-can test AWS locally-practice)/ClouadCraft(3D system viz)/Encore(app in Go/TS):
https://www.youtube.com/watch?v=gJmz31JywM0&ab_channel=Fireship

AWS Certs (Fundamentals/DevOps/CloudSolutionsArchitect)Do on Coursera, then pay 150$ to do a certification test on AWS to make it 'official'. Docker -> AWS -> Go(TDD) -> Escape :
https://www.coursera.org/specializations/aws-fundamentals
https://www.coursera.org/specializations/aws-devops
https://www.coursera.org/professional-certificates/aws-cloud-solutions-architect
https://aws.amazon.com/certification/

Go Vs Node Benchmarks (Let's Goooooooooo! 80k requests per second vs 8k RPS + 10xLatency) :
https://www.youtube.com/watch?v=ZslbMp_T90k&ab_channel=AntonPutra
Go Vs Bun Benchmarks :
https://www.youtube.com/watch?v=ECnlX00YcPI&ab_channel=AntonPutra
Go Vs Bun Benchmarks Deboooooonked (Bun should not be faster than Go, 'Go' is compiled Vs V8JS Runtime, single vs multi threaded? - bun is better than go for a single thread/core-Maybe use 'Zig' vs Go):
https://www.youtube.com/watch?v=qB422eeOFr8&ab_channel=ThePrimeTime
Go Vs Zig Vs Node Vs Bun Vs Rust (Rust(barely) > Zig(similar to rust, easier to write) > Go(easier to write) > Node/Bun) (2 years old video): 
https://www.youtube.com/watch?app=desktop&v=RSY85SLXzwk&ab_channel=ThePrimeagen

